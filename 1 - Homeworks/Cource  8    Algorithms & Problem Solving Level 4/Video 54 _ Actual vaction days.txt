#pragma warning(disable : 4996)
#include <iostream>
#include <ctime>
using namespace std;

struct stDate {
    short Year;
    short Month;
    short Day;
};

bool isLeapYear(short Year) {
    return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}

bool IsDate1BeforeDate2(stDate Date1, stDate Date2) {
    return (Date1.Year < Date2.Year) ? true :
        (Date1.Year == Date2.Year) ?
        (Date1.Month < Date2.Month ? true :
            (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false;
}

short NumberOfDaysInAMonth(short Month, short Year) {
    if (Month < 1 || Month > 12) return 0;
    int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : days[Month - 1];
}

bool IsLastDayInMonth(stDate Date) {
    return Date.Day == NumberOfDaysInAMonth(Date.Month, Date.Year);
}

bool IsLastMonthInYear(short Month) {
    return Month == 12;
}

stDate IncreaseDateByOneDay(stDate Date) {
    if (IsLastDayInMonth(Date)) {
        if (IsLastMonthInYear(Date.Month)) {
            Date.Month = 1;
            Date.Day = 1;
            Date.Year++;
        }
        else {
            Date.Day = 1;
            Date.Month++;
        }
    }
    else {
        Date.Day++;
    }
    return Date;
}

short DayOfWeekOrder(short Day, short Month, short Year) {
    short a = (14 - Month) / 12;
    short y = Year - a;
    short m = Month + 12 * a - 2;
    return (Day + y + y / 4 - y / 100 + y / 400 + (31 * m) / 12) % 7;
}

short DayOfWeekOrder(stDate Date) {
    return DayOfWeekOrder(Date.Day, Date.Month, Date.Year);
}

string DayShortName(short DayOfWeekOrder) {
    string arrDayNames[] = { "Sun","Mon","Tue","Wed","Thu","Fri","Sat" };
    return arrDayNames[DayOfWeekOrder];
}

bool IsEndOfWeek(stDate Date) {
    return DayOfWeekOrder(Date) == 6; // Saturday
}

bool IsWeekEnd(stDate Date) {
    short DayIndex = DayOfWeekOrder(Date);
    return (DayIndex == 5 || DayIndex == 6); // Friday or Saturday
}

bool IsBusinessDay(stDate Date) {
    return !IsWeekEnd(Date);
}

short DaysUntilTheEndOfWeek(stDate Date) {
    return 6 - DayOfWeekOrder(Date);
}

short ReadDay() {
    short Day;
    cout << "\nPlease enter a Day? ";
    cin >> Day;
    return Day;
}

short ReadMonth() {
    short Month;
    cout << "Please enter a Month? ";
    cin >> Month;
    return Month;
}

short ReadYear() {
    short Year;
    cout << "Please enter a Year? ";
    cin >> Year;
    return Year;
}

stDate ReadFullDate() {
    stDate Date;
    Date.Day = ReadDay();
    Date.Month = ReadMonth();
    Date.Year = ReadYear();
    return Date;
}

stDate GetSystemDate() {
    stDate Date;
    time_t t = time(0);
    tm* now = localtime(&t);
    Date.Year = now->tm_year + 1900;
    Date.Month = now->tm_mon + 1;
    Date.Day = now->tm_mday;
    return Date;
}

short Actual_Vaction(stDate DateFrom, stDate DateTo, bool IncludeEndDay = false) {

    short Days_Count = 0;
    while (IsDate1BeforeDate2(DateFrom, DateTo)) {

        if (IsBusinessDay(DateFrom)) {

            Days_Count++;
            
        }

        DateFrom = IncreaseDateByOneDay(DateFrom);
    }
    return IncludeEndDay ? ++Days_Count : Days_Count ;
}

int main() {
    stDate DateFrom = ReadFullDate();
    stDate DateTo = ReadFullDate();

    cout << "\n\nVactions from : " << DayShortName(DayOfWeekOrder(DateFrom))
        << " , " << DateFrom.Day << "/" << DateFrom.Month << "/" << DateFrom.Year << endl;
    cout << "\n\nTo            : " << DayShortName(DayOfWeekOrder(DateTo))
        << " , " << DateTo.Day << "/" << DateTo.Month << "/" << DateTo.Year << endl;

    cout << "\n\nActual Vaction is : " << Actual_Vaction(DateFrom, DateTo) << "\n\n";

    

    system("pause>0");
    return 0;
}
