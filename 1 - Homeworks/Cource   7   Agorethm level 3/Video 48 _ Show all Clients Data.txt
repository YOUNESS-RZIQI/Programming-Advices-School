







My version : 










#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <fstream>
using namespace std;


vector <string> Split_String(string s, string delim)
{

	vector <string> vNames;

	short pos = 0;
	string Word;

	while ((pos = s.find(delim)) != std::string::npos)
	{

		Word = s.substr(0, pos);

		if (Word != "")
		{
			vNames.push_back(Word);
		}

		s.erase(0, pos + delim.length());

	}

	if (s != "")
	{
		vNames.push_back(s);
	}


	return vNames;
}

short Count_File_Lines(const string& File_Name)
{

	fstream File;
	File.open(File_Name, ios::in);

	short Counter = 0;

	if (File.is_open())
	{
		string Line = " ";

		while (getline(File, Line))
		{
			++Counter;
		}

		File.close();
	}

	return Counter;
}

string Take_File_Content(const string& File_Name)
{

	fstream File;
	File.open(File_Name, ios::in);

	string All_F_Lines_IN_one = "";

	if (File.is_open())
	{
		string Line = " ";

		while (getline(File, Line))
		{
			All_F_Lines_IN_one += Line;
		}

		File.close();
	}

	return All_F_Lines_IN_one;
}

vector <string> Clients_Info_in_vector(string& delim, string& File_Name)
{

	string s = Take_File_Content(File_Name);

	vector <string> vClients_Info = Split_String(s, delim);

	return vClients_Info;
}

void Header_Menu()
{

	printf("\t\t\tClient List (%d) Client(s).\n\n", Count_File_Lines("MyFile.txt"));
	cout << "-------------------------------------------------------------------------------------\n";
	cout << "| Account Number | Pin Code  | Client Name                 | Phone Number | Balance \n";
	cout << "-------------------------------------------------------------------------------------\n\n";

}

void Med_Menu(string delim, string File_Name)
{

	vector <string> vClient_Info = Clients_Info_in_vector(delim, File_Name);

	for (short i = 0; i < Count_File_Lines(File_Name); i++)
	{

		while (vClient_Info.size() >= 5)
		{
			cout << "|" << setw(16) << vClient_Info[0] << "| "
				<< setw(11) << vClient_Info[1] << "| "
				<< setw(29) << vClient_Info[2] << "| "
				<< setw(14) << vClient_Info[3] << "| "
				<< setw(9) << vClient_Info[4] << "|\n";

			// Remove first 5 items
			for (short i = 0; i < 5; ++i)
				vClient_Info.erase(vClient_Info.begin());
		}


	}


}



int main()
{

	Header_Menu();
	Med_Menu("#//#", "MyFile.txt");

	return 0;
}







My second version : 













#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <fstream>
#include "Input_Lib.h"
using namespace std;

struct st_Client_Info
{
	string Account_Number;
	string Pin_Code;
	string Full_Name;
	string Phone_Number;
	double Account_Balance;

};

vector <string> Split_String(string s, string delim = "#//#")
{

	vector <string> vNames;

	short pos = 0;
	string Word;

	while ((pos = s.find(delim)) != std::string::npos)
	{

		Word = s.substr(0, pos);

		if (Word != "")
		{
			vNames.push_back(Word);
		}

		s.erase(0, pos + delim.length());

	}

	if (s != "")
	{
		vNames.push_back(s);
	}


	return vNames;
}

st_Client_Info Convert_Line_of_Data_to_Record(string s, const string& delim = "#//#")
{

	st_Client_Info Client_Info;

	vector <string> vClient_Info;

	vClient_Info = Split_String(s, delim);


	Client_Info.Account_Number = vClient_Info[0];
	Client_Info.Pin_Code = vClient_Info[1];
	Client_Info.Full_Name = vClient_Info[2];
	Client_Info.Phone_Number = vClient_Info[3];
	(Client_Info.Account_Balance) = stod(vClient_Info[4]);

	return Client_Info;
}

vector <st_Client_Info> Take_Clientes_Data(const string& File_Name)
{
	vector <st_Client_Info> vClients;

	fstream File;
	File.open(File_Name, ios::in);


	if (File.is_open())
	{
		string Line = "";
		st_Client_Info vClient;

		while (getline(File, Line))
		{
			vClient = Convert_Line_of_Data_to_Record(Line);
			vClients.push_back(vClient);
		}

		File.close();
	}


	return vClients;
}

void Man_Menu(vector <st_Client_Info>& vClients)
{

	cout << "\t\t\tClient List (" << vClients.size() << ") Client(s).\n\n"; ;
	cout << "-----------------------------------------------------------------------------------------\n";
	cout << "| Account Number | Pin Code  | Client Name                 | Phone Number | Balance \n";
	cout << "-----------------------------------------------------------------------------------------\n\n";

	for (st_Client_Info& client : vClients)
	{

		cout << "|" << left << setw(16) << client.Account_Number << "| "
			<< left << setw(11) << client.Pin_Code << "| "
			<< left << setw(29) << client.Full_Name << "| "
			<< left << setw(14) << client.Phone_Number << "| "
			<< left << setw(9) << client.Account_Balance << "|\n";

	}

}



int main()
{

	vector <st_Client_Info> vClients = Take_Clientes_Data("MyFile.txt");

	Man_Menu(vClients);


	return 0;
}








Teacher Version : 











#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <iomanip>

using namespace std;
const string ClientsFileName = "MyFile.txt";
struct sClient
{
	string AccountNumber;
	string PinCode;
	string Name;
	string Phone;
	double AccountBalance;
};
vector<string> SplitString(string S1, string Delim)
{
	vector<string> vString;
	short pos = 0;
	string sWord; // define a string variable
	// use find() function to get the position of the delimiters
	while ((pos = S1.find(Delim)) != std::string::npos)
	{
		sWord = S1.substr(0, pos); // store the word
		if (sWord != "")
		{
			vString.push_back(sWord);
		}
		S1.erase(0, pos + Delim.length());
	}
	if (S1 != "")
	{
		vString.push_back(S1); // it adds last word of the string.
	}
	return vString;
}

sClient ConvertLinetoRecord(string Line, string Seperator ="#//#")
{
	sClient Client;
	vector<string> vClientData;
	vClientData = SplitString(Line, Seperator);
	Client.AccountNumber = vClientData[0];
	Client.PinCode = vClientData[1];
	Client.Name = vClientData[2];
	Client.Phone = vClientData[3];
	Client.AccountBalance = stod(vClientData[4]);//cast string to double
		return Client;
}
vector <sClient> LoadCleintsDataFromFile(string FileName)
{
	vector <sClient> vClients;
	fstream MyFile;
	MyFile.open(FileName, ios::in);//read Mode
	if (MyFile.is_open())
	{
		string Line;
		sClient Client;
		while (getline(MyFile, Line))
		{
			Client = ConvertLinetoRecord(Line);
			vClients.push_back(Client);
		}
		MyFile.close();
	}
	return vClients;
}

void PrintClientRecord(sClient Client)
{
	cout << "| " << setw(15) << left << Client.AccountNumber;
	cout << "| " << setw(10) << left << Client.PinCode;
	cout << "| " << setw(40) << left << Client.Name;
	cout << "| " << setw(12) << left << Client.Phone;
	cout << "| " << setw(12) << left << Client.AccountBalance;
}

void PrintAllClientsData(vector <sClient> vClients)
{
	cout << "\n\t\t\t\t\tClient List (" << vClients.size() << ")Client(s).";
	cout << "\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	cout << "| " << left << setw(15) << "Accout Number";
	cout << "| " << left << setw(10) << "Pin Code";
	cout << "| " << left << setw(40) << "Client Name";
	cout << "| " << left << setw(12) << "Phone";
	cout << "| " << left << setw(12) << "Balance";
	cout <<
		"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	for (sClient Client : vClients)
	{
		PrintClientRecord(Client);
		cout << endl;
	}
	cout <<
		"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
}

int main()
{
	vector <sClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
	PrintAllClientsData(vClients);

	system("pause>0");
	return 0;
}