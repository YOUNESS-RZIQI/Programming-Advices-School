My version 💁‍♂️  💁‍♂️  This one :  



#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <fstream>
#include <cstdlib>
#include <cmath>
using namespace std;

int Randam_Number_In_Range(int From, int To)
{

	int RandNum = rand() % (To - From + 1) + From;

	return RandNum;
}

void Fill_Matrix_W_Randum_Numbers(int Arr[3][3], const short& Rows, const short& Coloms)
{

	for (int i = 0; i < Rows; i++)
	{

		for (int j = 0; j < Coloms; j++)
		{
			Arr[i][j] = Randam_Number_In_Range(1, 10);
		}

	}


}

void Print_Matrix(int Arr[3][3], const short& Rows, const short& Coloms)
{

	for (int i = 0; i < Rows; i++)
	{

		for (int j = 0; j < Coloms; j++)
		{
			printf("%02d\t", Arr[i][j]);
			//cout << setw(3) << Arr[i][j] << "    ";
		}

		cout << endl;

	}


}

int Sum_of_Matrix(int Arr[3][3], const int& Rows, const int& Colms) 
{

	int Sum = 0;

	for (int i = 0; i < Rows; i++)
	{

		for (int j = 0; j < Colms; j++) 
		{

			Sum += Arr[i][j];

		}

	}

	return Sum;
}

string is_Matrices_equal(int Arr_1[3][3], int Arr_2[3][3], const short& Rows, const int& Colms)
{

	if (Sum_of_Matrix(Arr_1, Rows, Colms) == Sum_of_Matrix(Arr_2, Rows, Colms))
		return "equal";
	else
		return "Not equal";

}

int main()
{
	srand((unsigned)time(NULL));

	int Arr_1[3][3] ,Arr_2[3][3];


	Fill_Matrix_W_Randum_Numbers(Arr_1, 3, 3);
	cout << "The Matrex 1 : \n\n";
	Print_Matrix(Arr_1, 3, 3);
	cout << "\n\n" << endl;


	

	Fill_Matrix_W_Randum_Numbers(Arr_2, 3, 3);
	cout << "The Matrex 2 : \n\n";
	Print_Matrix(Arr_2, 3, 3);
	cout << "\n\n" << endl;



	cout << "The Matrices " << is_Matrices_equal(Arr_1, Arr_2, 3, 3) << endl;

	

	

	cout << "\n\n" << endl;

	system("pause>0");

}







Teacher version 💁‍♂️  💁‍♂️  This one :  






#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <fstream>
#include <cstdlib>
#include <cmath>
using namespace std;

int Randam_Number_In_Range(int From, int To)
{

	int RandNum = rand() % (To - From + 1) + From;

	return RandNum;
}

void Fill_Matrix_W_Randum_Numbers(int Arr[3][3], const short& Rows, const short& Coloms)
{

	for (int i = 0; i < Rows; i++)
	{

		for (int j = 0; j < Coloms; j++)
		{
			Arr[i][j] = Randam_Number_In_Range(1, 1);
		}

	}


}

void Print_Matrix(int Arr[3][3], const short& Rows, const short& Coloms)
{

	for (int i = 0; i < Rows; i++)
	{

		for (int j = 0; j < Coloms; j++)
		{
			printf("%02d\t", Arr[i][j]);
			//cout << setw(3) << Arr[i][j] << "    ";
		}

		cout << endl;

	}


}

int Sum_of_Matrix(int Arr[3][3], const int& Rows, const int& Colms) 
{

	int Sum = 0;

	for (int i = 0; i < Rows; i++)
	{

		for (int j = 0; j < Colms; j++) 
		{

			Sum += Arr[i][j];

		}

	}

	return Sum;
}

bool is_Matrices_equal(int Arr_1[3][3], int Arr_2[3][3], const short& Rows, const int& Colms)
{
	return (Sum_of_Matrix(Arr_1, Rows, Colms) == Sum_of_Matrix(Arr_2, Rows, Colms));
}

int main()
{
	srand((unsigned)time(NULL));

	int Arr_1[3][3] ,Arr_2[3][3];


	Fill_Matrix_W_Randum_Numbers(Arr_1, 3, 3);
	cout << "The Matrex 1 : \n\n";
	Print_Matrix(Arr_1, 3, 3);
	cout << "\n\n" << endl;


	

	Fill_Matrix_W_Randum_Numbers(Arr_2, 3, 3);
	cout << "The Matrex 2 : \n\n";
	Print_Matrix(Arr_2, 3, 3);
	cout << "\n\n" << endl;



	cout << "The Matrices " << endl;

	if (is_Matrices_equal(Arr_1, Arr_2, 3, 3))
		cout << "Yes , the matreces are equal\n";
	else
		cout << "No  , the matreces are not equal\n";

	

	

	cout << "\n\n" << endl;

	system("pause>0");

}