


Exactly â€” **CRUD** is a shortcut (an acronym) that stands for:

- **C** = Create (like adding a new client)
- **R** = Read (viewing or retrieving data)
- **U** = Update (editing existing data)
- **D** = Delete (removing data)






My Version :




#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <iomanip>
#include "Input_Lib.h"

using namespace std;
const string ClientsFileName = "MyFile.txt";

struct sClient
{
	string AccountNumber;
	string PinCode;
	string Name;
	string Phone;
	double AccountBalance;
	bool MarkForDelete = false;

};

vector<string> SplitString(string S1, string Delim)
{
	vector<string> vString;
	short pos = 0;
	string sWord; // define a string variable
	// use find() function to get the position of the delimiters
	while ((pos = S1.find(Delim)) != std::string::npos)
	{
		sWord = S1.substr(0, pos); // store the word
		if (sWord != "")
		{
			vString.push_back(sWord);
		}
		S1.erase(0, pos + Delim.length());
	}
	if (S1 != "")
	{
		vString.push_back(S1); // it adds last word of the string.
	}
	return vString;
}

sClient ConvertLinetoRecord(string Line, string Seperator = "#//#")
{
	sClient Client;
	vector<string> vClientData;
	vClientData = SplitString(Line, Seperator);
	Client.AccountNumber = vClientData[0];
	Client.PinCode = vClientData[1];
	Client.Name = vClientData[2];
	Client.Phone = vClientData[3];
	Client.AccountBalance = stod(vClientData[4]);//cast string to double
	return Client;
}

string ConvertRecordToLine(const sClient& Client_Info, const string& delim = "#//#")
{

	string Client_Record = "";

	Client_Record += Client_Info.AccountNumber + delim;
	Client_Record += Client_Info.PinCode + delim;
	Client_Record += Client_Info.Name + delim;
	Client_Record += Client_Info.Phone + delim;
	Client_Record += to_string(Client_Info.AccountBalance);


	return Client_Record;
}


void PrintClientCard(sClient Client)
{
	cout << "\nThe following are the client details:\n";
	cout << "\nAccout Number: " << Client.AccountNumber;
	cout << "\nPin Code : " << Client.PinCode;
	cout << "\nName : " << Client.Name;
	cout << "\nPhone : " << Client.Phone;
	cout << "\nAccount Balance: " << Client.AccountBalance;
}

void SaveCleintsRecordDataToFile(string FileName, vector	<sClient> vClients)
{
	fstream MyFile;
	MyFile.open(FileName, ios::out);//overwrite
	string Line = "";
	if (MyFile.is_open())
	{
		for (sClient C : vClients)
		{
			if (C.MarkForDelete == false)
			{
				//we only write records that are not marked for delete.
				Line = ConvertRecordToLine(C);
				MyFile << Line << endl;
			}
		}
		MyFile.close();
	}
}

sClient Read_New_Client_Record_if_Not_Repeted(sClient & Client_Info)
{

	

	Client_Info.PinCode = Input_Lib::Ask_for_string("Pin Code        : ");
	Client_Info.Name = Input_Lib::Ask_for_string("Full Name       : ");
	Client_Info.Phone = Input_Lib::Ask_for_string("Phone Number    : ");
	cout << "Account Balance : ";
	cin >> Client_Info.AccountBalance ;


	return Client_Info;

}

bool FindClientByAccountNumber(string AccountNumber, vector	<sClient> vClients, sClient & Client)
{
	for (sClient C : vClients)
	{
		if (C.AccountNumber == AccountNumber)
		{
			Client = C;
			return true;
		}
	}
	return false;
}

void Add_New_Client(vector <sClient> & vClients)
{

	sClient New_client;

	string Acc_Num = Input_Lib::Ask_for_string("\n\n\nAccount Number  : ");

	if (!FindClientByAccountNumber(Acc_Num, vClients, New_client))
	{
		New_client.AccountNumber = Acc_Num;
		New_client = Read_New_Client_Record_if_Not_Repeted(New_client);


		vClients.push_back(New_client);

		SaveCleintsRecordDataToFile("MyFile.txt", vClients);
		return;
	}
	
	if (FindClientByAccountNumber(New_client.AccountNumber, vClients, New_client))
	{
		cout << "\n\nThis Account Number is alredy exist schoos an other one :\n\n";

		Add_New_Client(vClients);
	}
	
}

vector <sClient> LoadCleintsDataFromFile(string FileName)
{
	vector <sClient> vClients;
	fstream MyFile;
	MyFile.open(FileName, ios::in);//read Mode
	if (MyFile.is_open())
	{
		string Line;
		sClient Client;
		while (getline(MyFile, Line))
		{
			Client = ConvertLinetoRecord(Line);
			vClients.push_back(Client);
		}
		MyFile.close();
	}
	return vClients;
}

void PrintClientRecord(sClient Client)
{
	cout << "| " << setw(15) << left << Client.AccountNumber;
	cout << "| " << setw(10) << left << Client.PinCode;
	cout << "| " << setw(40) << left << Client.Name;
	cout << "| " << setw(12) << left << Client.Phone;
	cout << "| " << setw(12) << left << Client.AccountBalance;
}

void Show_AllClientsData(vector <sClient> vClients)
{
	cout << "\n\t\t\t\t\tClient List (" << vClients.size() << ")Client(s).";
	cout << "\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	cout << "| " << left << setw(15) << "Accout Number";
	cout << "| " << left << setw(10) << "Pin Code";
	cout << "| " << left << setw(40) << "Client Name";
	cout << "| " << left << setw(12) << "Phone";
	cout << "| " << left << setw(12) << "Balance";
	cout <<
		"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	for (sClient Client : vClients)
	{
		PrintClientRecord(Client);
		cout << endl;
	}
	cout <<
		"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
}

void MarkClientForDeleteByAccountNumber(string AccountNumber, vector <sClient>& vClients)
{
	for (sClient& C : vClients)
	{
		if (C.AccountNumber == AccountNumber)
		{
			C.MarkForDelete = true;
		}
	}
}

void SaveCleintsDataToFile(string FileName, vector	<sClient> vClients)
{
	fstream MyFile;
	MyFile.open(FileName, ios::out);//overwrite
	string Line = "";
	if (MyFile.is_open())
	{
		for (sClient C : vClients)
		{
			if (C.MarkForDelete == false)
			{
				//we only write records that are not marked for delete.
				Line = ConvertRecordToLine(C);
				MyFile << Line << endl;
			}
		}
		MyFile.close();
	}
}

string ReadClientAccountNumber()
{
	string AccountNumber = "";
	cout << "\nPlease enter AccountNumber? ";
	cin >> AccountNumber;
	return AccountNumber;
}

void DeleteClientByAccountNumber(string AccountNumber, vector	<sClient>& vClients)
{
	sClient Client;
	char Answer = 'n';
	if (FindClientByAccountNumber(AccountNumber, vClients, Client))
	{
		PrintClientCard(Client);

		cout << "\n\nAre you sure you want delete this client? y/n ? ";
		cin >> Answer;
		if (Answer == 'y' || Answer == 'Y')
		{
			MarkClientForDeleteByAccountNumber(AccountNumber, vClients);
			SaveCleintsDataToFile(ClientsFileName, vClients);

			//Refresh Clients
			vClients = LoadCleintsDataFromFile(ClientsFileName);
			cout << "\n\nClient Deleted Successfully.";
		}
	}
	else
	{
		cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
	}
}

void Find_client_to_Up_Date(string& Acc_Num, sClient& Client)
{

	cout << "\n\nEnter Pin Code     : "; getline(cin >> ws, Client.PinCode);
	cout << "\nEnter Name           : "; cin >> Client.Name;
	cout << "\nEnter Phone          : "; cin >> Client.Phone;
	cout << "\nEnter Account Balance: "; cin >> Client.AccountBalance;


}

void Up_Date(string& Acc_Num, vector <sClient>& vClients)
{

	for (sClient& c : vClients)
	{
		if (c.AccountNumber == Acc_Num)
		{
			Find_client_to_Up_Date(Acc_Num, c);
			break; // we did break to exit the for loop to do not wast time , and not return because it will exit us from the all Procedural
			//      Not the for Loop we , and we want just to exite the For Loop
		}
	}

	SaveCleintsDataToFile("MyFile.txt", vClients);

}

void Up_Date_Client_By_Account_Number(string AccountNumber, vector <sClient>& vClients)
{
	sClient Client;
	char Answer = 'n';
	if (FindClientByAccountNumber(AccountNumber, vClients, Client))
	{
		PrintClientCard(Client);

		cout << "\n\nAre you sure you want Update this client? y/n ? ";
		cin >> Answer;
		if (Answer == 'y' || Answer == 'Y')
		{

			Up_Date(AccountNumber, vClients);


			cout << "\n\nClient Up Dated Successfully.";
		}
	}
	else
	{
		cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
	}
}

void Main_Menu()
{
	cout << "\n====================================\n";
	cout << "            MAIN MENU               \n";
	cout << "====================================\n";
	cout << " [1] Show All Clients\n";
	cout << " [2] Add New Client\n";
	cout << " [3] Delete Client\n";
	cout << " [4] Update Client Info\n";
	cout << " [5] Show Specific Client\n";
	cout << " [6] Exit Program\n";
	cout << "====================================\n";
	cout << " Enter your choice: ";
}

void New_Client_Screen()
{
	cout << "          New Client Screen               \n";
	cout << "-----------------------------------\n";
}

void UpDate_Client_Screen()
{
	cout << "        Up Date Client Screen               \n";
	cout << "-----------------------------------\n";
}

void Delete_Client_Screen()
{
	cout << "        Delete Client Screen               \n";
	cout << "-----------------------------------\n";
}

void Banq_1(vector <sClient>& vClients, sClient& Client, short& Menu_Choices, char & a  )
{

	do
	{
		system("cls");

		Main_Menu();
		cin >> Menu_Choices;


		if (Menu_Choices == 1)
		{
			system("cls");
			Show_AllClientsData(vClients);
			cout << "\n\n Price any key to go back to Main Menu... ";
			cin >> a;
		}

		if (Menu_Choices == 2)
		{
			system("cls");
			New_Client_Screen();
			Add_New_Client(vClients);
			cout << "\n\n Price any key to go back to Main Menu... ";
			cin >> a;
		}

		if (Menu_Choices == 3)
		{
			system("cls");
			Delete_Client_Screen();
			DeleteClientByAccountNumber(ReadClientAccountNumber(), vClients);
			cout << "\n\n Price any key to go back to Main Menu... ";
			cin >> a;
		}

		if (Menu_Choices == 4)
		{
			system("cls");
			UpDate_Client_Screen();
			Up_Date_Client_By_Account_Number(ReadClientAccountNumber(), vClients);
			cout << "\n\n Price any key to go back to Main Menu... ";
			cin >> a;
		}

		if (Menu_Choices == 5)
		{
			system("cls");
			FindClientByAccountNumber(ReadClientAccountNumber(), vClients, Client);
			cout << "\n\nThes are the Client Informaions : \n\n";
			PrintClientCard(Client);
			cout << "\n\n Price any key to go back to Main Menu... ";
			cin >> a;

		}


	} while (Menu_Choices != 6);


}

void Program_End()
{
	cout << "\n====================================\n";
	cout << "            Programm End  :)               \n";
	cout << "====================================\n";

}

int main()
{
	vector <sClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
	sClient Client;
	short Menu_Choices = 0;
	char a = 'a';

	Banq_1(vClients, Client, Menu_Choices, a);

	Program_End();

	system("pause>0");
}












Teacher Version  : 



#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <iomanip>
#include "Input_Lib.h"

using namespace std;
const string ClientsFileName = "MyFile.txt";
void Main_Menu_Options();

struct sClient
{
	string AccountNumber;
	string PinCode;
	string Name;
	string Phone;
	double AccountBalance;
	bool MarkForDelete = false;

};

vector<string> SplitString(string S1, string Delim)
{
	vector<string> vString;
	short pos = 0;
	string sWord; // define a string variable
	// use find() function to get the position of the delimiters
	while ((pos = S1.find(Delim)) != std::string::npos)
	{
		sWord = S1.substr(0, pos); // store the word
		if (sWord != "")
		{
			vString.push_back(sWord);
		}
		S1.erase(0, pos + Delim.length());
	}
	if (S1 != "")
	{
		vString.push_back(S1); // it adds last word of the string.
	}
	return vString;
}

sClient ConvertLinetoRecord(string Line, string Seperator = "#//#")
{
	sClient Client;
	vector<string> vClientData;
	vClientData = SplitString(Line, Seperator);
	Client.AccountNumber = vClientData[0];
	Client.PinCode = vClientData[1];
	Client.Name = vClientData[2];
	Client.Phone = vClientData[3];
	Client.AccountBalance = stod(vClientData[4]);//cast string to double
	return Client;
}

string ConvertRecordToLine(const sClient& Client_Info, const string& delim = "#//#")
{

	string Client_Record = "";

	Client_Record += Client_Info.AccountNumber + delim;
	Client_Record += Client_Info.PinCode + delim;
	Client_Record += Client_Info.Name + delim;
	Client_Record += Client_Info.Phone + delim;
	Client_Record += to_string(Client_Info.AccountBalance);


	return Client_Record;
}

void PrintClientCard(sClient Client)
{
	cout << "\n\nThes are the Client Informaions : \n\n";

	cout << "\nThe following are the client details:\n";
	cout << "\nAccout Number: " << Client.AccountNumber;
	cout << "\nPin Code : " << Client.PinCode;
	cout << "\nName : " << Client.Name;
	cout << "\nPhone : " << Client.Phone;
	cout << "\nAccount Balance: " << Client.AccountBalance;
}

void SaveCleintsRecordDataToFile(string FileName, vector	<sClient> vClients)
{
	fstream MyFile;
	MyFile.open(FileName, ios::out);//overwrite
	string Line = "";
	if (MyFile.is_open())
	{
		for (sClient C : vClients)
		{
			if (C.MarkForDelete == false)
			{
				//we only write records that are not marked for delete.
				Line = ConvertRecordToLine(C);
				MyFile << Line << endl;
			}
		}
		MyFile.close();
	}
}

sClient Read_New_Client_Record_if_Not_Repeted(sClient & Client_Info)
{

	

	Client_Info.PinCode = Input_Lib::Ask_for_string("Pin Code        : ");
	Client_Info.Name = Input_Lib::Ask_for_string("Full Name       : ");
	Client_Info.Phone = Input_Lib::Ask_for_string("Phone Number    : ");
	cout << "Account Balance : ";
	cin >> Client_Info.AccountBalance ;


	return Client_Info;

}

bool FindClientByAccountNumber(string AccountNumber, vector	<sClient> vClients, sClient & Client)
{
	for (sClient C : vClients)
	{
		if (C.AccountNumber == AccountNumber)
		{
			Client = C;
			return true;
		}
	}
	return false;
}

void Add_New_Client(vector <sClient> & vClients)
{

	sClient New_client;

	 New_client.AccountNumber = Input_Lib::Ask_for_string("\n\n\nAccount Number  : ");

	while (FindClientByAccountNumber(New_client.AccountNumber, vClients, New_client))
	{
		cout << "\n\nThis Account Number is alredy exist schoos an other one :\n\n";
		New_client.AccountNumber = Input_Lib::Ask_for_string("\n\n\nAccount Number  : ");

	}


	New_client = Read_New_Client_Record_if_Not_Repeted(New_client);

	vClients.push_back(New_client);

	SaveCleintsRecordDataToFile("MyFile.txt", vClients);
	
	
}

vector <sClient> LoadCleintsDataFromFile(string FileName)
{
	vector <sClient> vClients;
	fstream MyFile;
	MyFile.open(FileName, ios::in);//read Mode
	if (MyFile.is_open())
	{
		string Line;
		sClient Client;
		while (getline(MyFile, Line))
		{
			Client = ConvertLinetoRecord(Line);
			vClients.push_back(Client);
		}
		MyFile.close();
	}
	return vClients;
}

void PrintClientRecord(sClient Client)
{
	cout << "| " << setw(15) << left << Client.AccountNumber;
	cout << "| " << setw(10) << left << Client.PinCode;
	cout << "| " << setw(40) << left << Client.Name;
	cout << "| " << setw(12) << left << Client.Phone;
	cout << "| " << setw(12) << left << Client.AccountBalance;
}

void Show_AllClientsData(vector <sClient> vClients)
{
	cout << "\n\t\t\t\t\tClient List (" << vClients.size() << ")Client(s).";
	cout << "\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	cout << "| " << left << setw(15) << "Accout Number";
	cout << "| " << left << setw(10) << "Pin Code";
	cout << "| " << left << setw(40) << "Client Name";
	cout << "| " << left << setw(12) << "Phone";
	cout << "| " << left << setw(12) << "Balance";
	cout <<
		"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
	for (sClient Client : vClients)
	{
		PrintClientRecord(Client);
		cout << endl;
	}
	cout <<
		"\n_______________________________________________________";
	cout << "_________________________________________\n" << endl;
}

void MarkClientForDeleteByAccountNumber(string AccountNumber, vector <sClient>& vClients)
{
	for (sClient& C : vClients)
	{
		if (C.AccountNumber == AccountNumber)
		{
			C.MarkForDelete = true;
		}
	}
}

void SaveCleintsDataToFile(string FileName, vector	<sClient> vClients)
{
	fstream MyFile;
	MyFile.open(FileName, ios::out);//overwrite
	string Line = "";
	if (MyFile.is_open())
	{
		for (sClient C : vClients)
		{
			if (C.MarkForDelete == false)
			{
				//we only write records that are not marked for delete.
				Line = ConvertRecordToLine(C);
				MyFile << Line << endl;
			}
		}
		MyFile.close();
	}
}

string ReadClientAccountNumber()
{
	string AccountNumber = "";
	cout << "\nPlease enter AccountNumber? ";
	cin >> AccountNumber;
	return AccountNumber;
}

void DeleteClientByAccountNumber(string AccountNumber, vector	<sClient>& vClients)
{
	sClient Client;
	char Answer = 'n';
	if (FindClientByAccountNumber(AccountNumber, vClients, Client))
	{
		PrintClientCard(Client);

		cout << "\n\nAre you sure you want delete this client? y/n ? ";
		cin >> Answer;
		if (Answer == 'y' || Answer == 'Y')
		{
			MarkClientForDeleteByAccountNumber(AccountNumber, vClients);
			SaveCleintsDataToFile(ClientsFileName, vClients);

			//Refresh Clients
			vClients = LoadCleintsDataFromFile(ClientsFileName);
			cout << "\n\nClient Deleted Successfully.";
		}
	}
	else
	{
		cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
	}
}

void Find_client_to_Up_Date(string& Acc_Num, sClient& Client)
{

	cout << "\n\nEnter Pin Code     : "; getline(cin >> ws, Client.PinCode);
	cout << "\nEnter Name           : "; cin >> Client.Name;
	cout << "\nEnter Phone          : "; cin >> Client.Phone;
	cout << "\nEnter Account Balance: "; cin >> Client.AccountBalance;


}

void Up_Date(string& Acc_Num, vector <sClient>& vClients)
{

	for (sClient& c : vClients)
	{
		if (c.AccountNumber == Acc_Num)
		{
			Find_client_to_Up_Date(Acc_Num, c);
			break; // we did break to exit the for loop to do not wast time , and not return because it will exit us from the all Procedural
			//      Not the for Loop we , and we want just to exite the For Loop
		}
	}

	SaveCleintsDataToFile("MyFile.txt", vClients);

}

void Up_Date_Client_By_Account_Number(string AccountNumber, vector <sClient>& vClients)
{
	sClient Client;
	char Answer = 'n';
	if (FindClientByAccountNumber(AccountNumber, vClients, Client))
	{
		PrintClientCard(Client);

		cout << "\n\nAre you sure you want Update this client? y/n ? ";
		cin >> Answer;
		if (Answer == 'y' || Answer == 'Y')
		{

			Up_Date(AccountNumber, vClients);


			cout << "\n\nClient Up Dated Successfully.";
		}
	}
	else
	{
		cout << "\nClient with Account Number (" << AccountNumber << ") is Not Found!";
	}
}

void Main_Menu_Screen()
{
	cout << "\n====================================\n";
	cout << "            MAIN MENU               \n";
	cout << "====================================\n";
	cout << " [1] Show All Clients\n";
	cout << " [2] Add New Client\n";
	cout << " [3] Delete Client\n";
	cout << " [4] Update Client Info\n";
	cout << " [5] Show Specific Client\n";
	cout << " [6] Exit Program\n";
	cout << "====================================\n";
	cout << " Enter your choice: ";
}

void New_Client_Screen()
{
	cout << "          New Client Screen               \n";
	cout << "-----------------------------------\n";
}

void UpDate_Client_Screen()
{
	cout << "        Up Date Client Screen               \n";
	cout << "-----------------------------------\n";
}

void Delete_Client_Screen()
{
	cout << "        Delete Client Screen               \n";
	cout << "-----------------------------------\n";
}

enum en_Main_Menu_Options { Show_All_Clients_Data = 1, Add_New_Clinet = 2,
	Delete_Client_By_Acc_Num = 3 , Client_Up_Date = 4 , Client_Card_Info = 5 , Exit = 6 };

void Banq_1(vector <sClient>& vClients, sClient& Client )
{

	en_Main_Menu_Options User_Choices ;
	short Menu_Choices = 0;

	
		system("cls");

		Main_Menu_Screen();
		cin >> Menu_Choices;
		User_Choices = en_Main_Menu_Options(Menu_Choices);


		switch (User_Choices)
		{
		case en_Main_Menu_Options::Show_All_Clients_Data:

			system("cls");
			Show_AllClientsData(vClients);
			system("pause");
			Main_Menu_Options();

			break;

		case Add_New_Clinet:

			system("cls");
			New_Client_Screen();
			Add_New_Client(vClients);
			system("pause");
			Main_Menu_Options();

			break;

		case Delete_Client_By_Acc_Num:

			system("cls");
			Delete_Client_Screen();
			DeleteClientByAccountNumber(ReadClientAccountNumber(), vClients);
			system("pause");
			Main_Menu_Options();

			break;

		case Client_Up_Date:

			system("cls");
			UpDate_Client_Screen();
			Up_Date_Client_By_Account_Number(ReadClientAccountNumber(), vClients);
			system("pause");
			Main_Menu_Options();

			break;

		case Client_Card_Info:

			system("cls");
			FindClientByAccountNumber(ReadClientAccountNumber(), vClients, Client);
			PrintClientCard(Client);
			system("pause");
			Main_Menu_Options();

			break;

		case Exit:

			system("cls");
			Program_End();
			system("pause");

			break;
		
		}



}

void Program_End()
{
	system("cls");
	cout << "\n\n\n====================================\n";
	cout << "            Programm End  :)               \n";
	cout << "====================================\n";

}

void Main_Menu_Options()
{
	vector <sClient> vClients = LoadCleintsDataFromFile(ClientsFileName);
	sClient Client;
	
	Banq_1(vClients, Client);

}

int main()
{
	
	Main_Menu_Options();

	system("pause>0");
	return 0;
}













